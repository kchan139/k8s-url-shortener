/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './features/~__root'
import { Route as IndexImport } from './features/~index'
import { Route as RegisterIndexImport } from './features/~register/~index'
import { Route as MyUrlsIndexImport } from './features/~my-urls/~index'
import { Route as ManagerIndexImport } from './features/~manager/~index'
import { Route as LoginIndexImport } from './features/~login/~index'
import { Route as CampaignIndexImport } from './features/~campaign/~index'
import { Route as AdminIndexImport } from './features/~admin/~index'
import { Route as CampaignCpnidHashImport } from './features/~campaign/~$cpnid/~$hash'
import { Route as CampaignCpnidIndexImport } from './features/~campaign/~$cpnid/~index'
import { Route as AdminUserIndexImport } from './features/~admin/~user/~index'
import { Route as AdminRoleIndexImport } from './features/~admin/~role/~index'
import { Route as AdminPermissionIndexImport } from './features/~admin/~permission/~index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const RegisterIndexRoute = RegisterIndexImport.update({
  id: '/register/',
  path: '/register/',
  getParentRoute: () => rootRoute,
} as any)

const MyUrlsIndexRoute = MyUrlsIndexImport.update({
  id: '/my-urls/',
  path: '/my-urls/',
  getParentRoute: () => rootRoute,
} as any)

const ManagerIndexRoute = ManagerIndexImport.update({
  id: '/manager/',
  path: '/manager/',
  getParentRoute: () => rootRoute,
} as any)

const LoginIndexRoute = LoginIndexImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any)

const CampaignIndexRoute = CampaignIndexImport.update({
  id: '/campaign/',
  path: '/campaign/',
  getParentRoute: () => rootRoute,
} as any)

const AdminIndexRoute = AdminIndexImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => rootRoute,
} as any)

const CampaignCpnidHashRoute = CampaignCpnidHashImport.update({
  id: '/campaign/$cpnid/$hash',
  path: '/campaign/$cpnid/$hash',
  getParentRoute: () => rootRoute,
} as any)

const CampaignCpnidIndexRoute = CampaignCpnidIndexImport.update({
  id: '/campaign/$cpnid/',
  path: '/campaign/$cpnid/',
  getParentRoute: () => rootRoute,
} as any)

const AdminUserIndexRoute = AdminUserIndexImport.update({
  id: '/admin/user/',
  path: '/admin/user/',
  getParentRoute: () => rootRoute,
} as any)

const AdminRoleIndexRoute = AdminRoleIndexImport.update({
  id: '/admin/role/',
  path: '/admin/role/',
  getParentRoute: () => rootRoute,
} as any)

const AdminPermissionIndexRoute = AdminPermissionIndexImport.update({
  id: '/admin/permission/',
  path: '/admin/permission/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexImport
      parentRoute: typeof rootRoute
    }
    '/campaign/': {
      id: '/campaign/'
      path: '/campaign'
      fullPath: '/campaign'
      preLoaderRoute: typeof CampaignIndexImport
      parentRoute: typeof rootRoute
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/manager/': {
      id: '/manager/'
      path: '/manager'
      fullPath: '/manager'
      preLoaderRoute: typeof ManagerIndexImport
      parentRoute: typeof rootRoute
    }
    '/my-urls/': {
      id: '/my-urls/'
      path: '/my-urls'
      fullPath: '/my-urls'
      preLoaderRoute: typeof MyUrlsIndexImport
      parentRoute: typeof rootRoute
    }
    '/register/': {
      id: '/register/'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterIndexImport
      parentRoute: typeof rootRoute
    }
    '/admin/permission/': {
      id: '/admin/permission/'
      path: '/admin/permission'
      fullPath: '/admin/permission'
      preLoaderRoute: typeof AdminPermissionIndexImport
      parentRoute: typeof rootRoute
    }
    '/admin/role/': {
      id: '/admin/role/'
      path: '/admin/role'
      fullPath: '/admin/role'
      preLoaderRoute: typeof AdminRoleIndexImport
      parentRoute: typeof rootRoute
    }
    '/admin/user/': {
      id: '/admin/user/'
      path: '/admin/user'
      fullPath: '/admin/user'
      preLoaderRoute: typeof AdminUserIndexImport
      parentRoute: typeof rootRoute
    }
    '/campaign/$cpnid/': {
      id: '/campaign/$cpnid/'
      path: '/campaign/$cpnid'
      fullPath: '/campaign/$cpnid'
      preLoaderRoute: typeof CampaignCpnidIndexImport
      parentRoute: typeof rootRoute
    }
    '/campaign/$cpnid/$hash': {
      id: '/campaign/$cpnid/$hash'
      path: '/campaign/$cpnid/$hash'
      fullPath: '/campaign/$cpnid/$hash'
      preLoaderRoute: typeof CampaignCpnidHashImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminIndexRoute
  '/campaign': typeof CampaignIndexRoute
  '/login': typeof LoginIndexRoute
  '/manager': typeof ManagerIndexRoute
  '/my-urls': typeof MyUrlsIndexRoute
  '/register': typeof RegisterIndexRoute
  '/admin/permission': typeof AdminPermissionIndexRoute
  '/admin/role': typeof AdminRoleIndexRoute
  '/admin/user': typeof AdminUserIndexRoute
  '/campaign/$cpnid': typeof CampaignCpnidIndexRoute
  '/campaign/$cpnid/$hash': typeof CampaignCpnidHashRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminIndexRoute
  '/campaign': typeof CampaignIndexRoute
  '/login': typeof LoginIndexRoute
  '/manager': typeof ManagerIndexRoute
  '/my-urls': typeof MyUrlsIndexRoute
  '/register': typeof RegisterIndexRoute
  '/admin/permission': typeof AdminPermissionIndexRoute
  '/admin/role': typeof AdminRoleIndexRoute
  '/admin/user': typeof AdminUserIndexRoute
  '/campaign/$cpnid': typeof CampaignCpnidIndexRoute
  '/campaign/$cpnid/$hash': typeof CampaignCpnidHashRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/admin/': typeof AdminIndexRoute
  '/campaign/': typeof CampaignIndexRoute
  '/login/': typeof LoginIndexRoute
  '/manager/': typeof ManagerIndexRoute
  '/my-urls/': typeof MyUrlsIndexRoute
  '/register/': typeof RegisterIndexRoute
  '/admin/permission/': typeof AdminPermissionIndexRoute
  '/admin/role/': typeof AdminRoleIndexRoute
  '/admin/user/': typeof AdminUserIndexRoute
  '/campaign/$cpnid/': typeof CampaignCpnidIndexRoute
  '/campaign/$cpnid/$hash': typeof CampaignCpnidHashRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/campaign'
    | '/login'
    | '/manager'
    | '/my-urls'
    | '/register'
    | '/admin/permission'
    | '/admin/role'
    | '/admin/user'
    | '/campaign/$cpnid'
    | '/campaign/$cpnid/$hash'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/campaign'
    | '/login'
    | '/manager'
    | '/my-urls'
    | '/register'
    | '/admin/permission'
    | '/admin/role'
    | '/admin/user'
    | '/campaign/$cpnid'
    | '/campaign/$cpnid/$hash'
  id:
    | '__root__'
    | '/'
    | '/admin/'
    | '/campaign/'
    | '/login/'
    | '/manager/'
    | '/my-urls/'
    | '/register/'
    | '/admin/permission/'
    | '/admin/role/'
    | '/admin/user/'
    | '/campaign/$cpnid/'
    | '/campaign/$cpnid/$hash'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminIndexRoute: typeof AdminIndexRoute
  CampaignIndexRoute: typeof CampaignIndexRoute
  LoginIndexRoute: typeof LoginIndexRoute
  ManagerIndexRoute: typeof ManagerIndexRoute
  MyUrlsIndexRoute: typeof MyUrlsIndexRoute
  RegisterIndexRoute: typeof RegisterIndexRoute
  AdminPermissionIndexRoute: typeof AdminPermissionIndexRoute
  AdminRoleIndexRoute: typeof AdminRoleIndexRoute
  AdminUserIndexRoute: typeof AdminUserIndexRoute
  CampaignCpnidIndexRoute: typeof CampaignCpnidIndexRoute
  CampaignCpnidHashRoute: typeof CampaignCpnidHashRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminIndexRoute: AdminIndexRoute,
  CampaignIndexRoute: CampaignIndexRoute,
  LoginIndexRoute: LoginIndexRoute,
  ManagerIndexRoute: ManagerIndexRoute,
  MyUrlsIndexRoute: MyUrlsIndexRoute,
  RegisterIndexRoute: RegisterIndexRoute,
  AdminPermissionIndexRoute: AdminPermissionIndexRoute,
  AdminRoleIndexRoute: AdminRoleIndexRoute,
  AdminUserIndexRoute: AdminUserIndexRoute,
  CampaignCpnidIndexRoute: CampaignCpnidIndexRoute,
  CampaignCpnidHashRoute: CampaignCpnidHashRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "~__root.tsx",
      "children": [
        "/",
        "/admin/",
        "/campaign/",
        "/login/",
        "/manager/",
        "/my-urls/",
        "/register/",
        "/admin/permission/",
        "/admin/role/",
        "/admin/user/",
        "/campaign/$cpnid/",
        "/campaign/$cpnid/$hash"
      ]
    },
    "/": {
      "filePath": "~index.tsx"
    },
    "/admin/": {
      "filePath": "~admin/~index.tsx"
    },
    "/campaign/": {
      "filePath": "~campaign/~index.tsx"
    },
    "/login/": {
      "filePath": "~login/~index.tsx"
    },
    "/manager/": {
      "filePath": "~manager/~index.tsx"
    },
    "/my-urls/": {
      "filePath": "~my-urls/~index.tsx"
    },
    "/register/": {
      "filePath": "~register/~index.tsx"
    },
    "/admin/permission/": {
      "filePath": "~admin/~permission/~index.tsx"
    },
    "/admin/role/": {
      "filePath": "~admin/~role/~index.tsx"
    },
    "/admin/user/": {
      "filePath": "~admin/~user/~index.tsx"
    },
    "/campaign/$cpnid/": {
      "filePath": "~campaign/~$cpnid/~index.tsx"
    },
    "/campaign/$cpnid/$hash": {
      "filePath": "~campaign/~$cpnid/~$hash.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
